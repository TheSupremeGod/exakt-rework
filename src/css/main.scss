/* Color Definitions */
$root-dark-rgb: red($root-dark), green($root-dark), blue($root-dark);
$root-light-rgb: red($root-light), green($root-light), blue($root-light);
$root-primary-rgb: red($root-primary), green($root-primary), blue($root-primary);
$root-red-rgb: red($root-red), green($root-red), blue($root-red);
$root-blue-rgb: red($root-blue), green($root-blue), blue($root-blue);

.rounded {
  border-radius: $rounded-border-radius;
}

$directions: (
  "t": "top",
  "r": "right",
  "b": "bottom",
  "l": "left",
);

@for $i from 0 through 6 {
  @each $name, $direction in $directions {
    .m#{$name}-#{$i} {
      margin-#{$direction}: #{0.2rem * $i};
    }
  }
  .my-#{$i} {
    margin-top: #{0.2rem * $i};
    margin-bottom: #{0.2rem * $i};
  }
  .mx-#{$i} {
    margin-left: #{0.2rem * $i};
    margin-right: #{0.2rem * $i};
  }
  .ma-#{$i} {
    margin: #{0.2rem * $i} !important;
  }

  @each $name, $direction in $directions {
    .p#{$name}-#{$i} {
      padding-#{$direction}: #{0.2rem * $i};
    }
  }
  .py-#{$i} {
    padding-top: #{0.2rem * $i};
    padding-bottom: #{0.2rem * $i};
  }
  .px-#{$i} {
    padding-left: #{0.2rem * $i};
    padding-right: #{0.2rem * $i};
  }
  .pa-#{$i} {
    padding: #{0.2rem * $i} !important;
  }

  .op-#{$i} {
    opacity: calc(#{$i}/ 6);
  }
}

.disp {
  width: 100%;

  @media screen and (min-width: ($md-screen-breakpoint)) {
    width: 90vw;
  }
  @media screen and (min-width: ($l-screen-breakpoint)) {
    width: 40rem;
  }
  @media screen and (min-width: ($xl-screen-breakpoint)) {
    width: 50rem;
  }
}

.interactive-color {
  color: var(--e-color-primary);
}

:root {
  --core-padding-x: 0.5rem;
}



ion-icon {
  pointer-events: none;
}

.fullheight {
  height: 100%;
}

.fullwidth {
  width: 100%;
}

.d-flex {
  display: flex;
}

.flex-stretch-y {
  display: flex;
  align-content: stretch;
  align-items: stretch;
}

.flex-stretch-x {
  display: flex;
  justify-content: stretch;
  justify-items: stretch;
}

.flex-stretch {
  @extend .flex-stretch-x;
  @extend .flex-stretch-y;
}

.flex-1 {
  flex: 1;
}

.flex-start {
  display: flex;
  align-content: flex-start;
  justify-content: flex-start;
  justify-items: flex-start;
  align-items: flex-start;
}

.flex-end {
  display: flex;
  align-content: flex-end;
  justify-content: flex-end;
  justify-items: flex-end;
  align-items: flex-end;
}

.flex-center {
  display: flex;
  align-content: center;
  justify-content: center;
  justify-items: center;
  align-items: center;
}

.justify-space-between {
  justify-content: space-between;
}

.flex-column {
  display: flex;
  flex-direction: column;
}

.text-center {
  text-align: center;
}

router-link,
a,
input,
label {
  text-decoration: none !important;
  // color: inherit !important;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

.scale-enter-active,
.scale-leave-active {
  transition: all 0.15s ease-in-out;
}

.scale-enter-from,
.scale-leave-to {
  opacity: 0;
  transform: scale(90%) translateY(-6%);
}

.fade-enter-active,
.fade-leave-active {
  transition: all 0.2s ease-in-out;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

:root {
  --core-padding-x: 1rem;
}

.e-blur {
  //background-color: rgba(255, 255, 255, 0.9);
  background-color: rgba(0, 0, 0, 0.9);
}

.e-disabled {
  opacity: 0.7;
  pointer-events: none;
}

@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {
  .e-blur {
    backdrop-filter: blur(12px);
    background-color: rgba(255, 255, 255, 0.7);
  }
}

$color-map: (
  "red": $root-red,
  "blue": $root-blue,
  "primary": $root-primary,
  "dark": $root-dark,
  "light": $root-light,
);

@each $name, $color in $color-map {
  :root {
    #{'--e-color-'+$name}: $color;
  }
  .bg-#{$name} {
    background: $color;
  }
  .color-#{$name} {
    color: $color;
  }
}

a,
.e-link {
  color: $root-blue;

  &:visited {
    color: color.scale($root-blue, $lightness: -10%);
  }
  &:active,
  .e-link-active {
    color: color.scale($root-blue, $lightness: 10%);
  }
}

@mixin elev($source, $lightness) {
  $root-elev: color.scale($source, $lightness: $lightness);
  $root-elev-2: color.scale($source, $lightness: $lightness * 2);

  --e-color-elev: #{$root-elev};
  --e-color-elev-rgb: #{red($root-elev), green($root-elev), blue($root-elev)};

  --e-color-elev-2: #{$root-elev-2};
  --e-color-elev-2-rgb: #{red($root-elev-2), green($root-elev-2), blue($root-elev-2)};
}

:root {
  --e-color-primary: #{$root-primary};
  --e-color-primary-rgb: #{$root-primary-rgb};

  --e-color-light: #{$root-light};
  --e-color-light-rgb: #{$root-light-rgb};

  --e-color-dark: #{$root-dark};
  --e-color-dark-rgb: #{$root-dark-rgb};

  @include elev($root-light, -5%);
}

@media (prefers-color-scheme: dark) {
  :root {
    --e-color-light: #{$root-dark};
    --e-color-light-rgb: #{$root-dark-rgb};

    --e-color-dark: #{$root-light};
    --e-color-dark-rgb: #{$root-light-rgb};

    @include elev($root-dark, 5%);
  }
}

body{
  background-color: var(--e-color-light);
  color: var(--e-color-dark);
  font-family: $font-family;
}